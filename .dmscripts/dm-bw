#!/usr/bin/env bash

configHome="${XDG_CONFIG_HOME:-${HOME}/.config}/dmscripts" #^
configFile="${configHome}/bw.json"
self=$(basename "${0##/*/}")
source /home/jpszc/.cache/bwsession

if [ -e "$configFile" ]; then
    copyCmds=$(jq -r ".copyCmds" "$configFile")
    dmenuOpts=$(jq -r ".dmenuOpts" "$configFile")
    editCmd=$(jq -r ".editCmd" "$configFile")
    passwordGenCmd=$(jq -r ".passwordGenCmd" "$configFile")
    sessionKeyFile=$(jq -r ".sessionKeyFile" "$configFile"); fi

if [ -z "$copyCmds" ] || [ "$copyCmds" = "null" ]; then
    copyCmds='
    {
        "login": {
            ".login.username": [
                "echo \"$value\" | xclip -i -selection clipboard"
            ],
            ".login.password": [
                "echo \"$value\" | xclip -i -selection primary"
            ]
        },
        "secureNote": {
	    ".notes": [
                 "echo \"$value\" | xclip -i -selection primary"
            ]
        },
        "card": {},
        "identity": {}
    }'; fi
if [ -z "$dmenuOpts" ] || [ "$dmenuOpts" = "null" ]; then
    dmenuOpts="-i -l 10"; fi
if [ -z "$editCmd" ] || [ "$editCmd" = "null" ]; then
    editCmd="xterm -e nano"; fi
[ "$passwordGenCmd" = "null" ] &&
    unset passwordGenCmd
[ "$sessionKeyFile" = "null" ] &&
    unset sessionKeyFile #$

bwStatus=$(bw status | jq -r '.status') #^
case "$bwStatus" in
    unlocked)   : ;;
    *)  case "$bwStatus" in
            unauthenticated)
                notify-send "$self" "Unauthenticated session. Acquiring new session key." &
                login=$(yad --form \
                    --field="Email" "" \
                    --field="Password":H "" \
                    --separator="\n" |
                        grep -v "^$")
                sessionKey=$(bw login \
                    "$(echo "$login" | sed -n "1p")" \
                    "$(echo "$login" | sed -n "2p")" \
                    --raw) ;;
            locked)
                notify-send "$self" "Session locked. Acquiring new session key." &
                password=$(yad \
                    --title "Password" \
                    --entry \
                    --hide-text)
                sessionKey=$(bw unlock "$password" --raw) ;;
            *)  notify-send "$self" "Failed to unlock session." &
                exit 1 ;;
        esac

        # output session key to file
        if [ -n "$sessionKeyFile" ]; then
            printf 'export BW_SESSION="%s"' \
                "$sessionKey" > "$sessionKeyFile"
        fi

        # confirm login
        export BW_SESSION=$sessionKey
        case $(bw status | jq -r '.status') in
            unlocked) : ;;
            *)  notify-send "$self" "Failed to unlock session." &
                exit 1 ;;
        esac ;;
esac #$
database=$(bw list items)
sepStr="=" #^
sep () {
    i=0
    while [ $i -le 500 ]; do
        printf "%s" "$sepStr"
        i=$(( i + 1 ))
    done
    printf "\n"
}
main_list () {
    echo "logout"
    echo "sync"
    sep
    echo $database | jq -r '.[] | "\(.name) | \(.login.username) | \(.id)"'
    sep
    echo "run Bitwarden Electron"
}

chosen=$(main_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
case "$chosen" in
    logout)     bw logout &&
                    notify-send "$self" "Logout successful." ||
                    notify-send "$self" "Logout failed." & ;;
    sync)       bw sync -f &&
                    notify-send "$self" "Sync successful." ||
                    notify-send "$self" "Sync failed." & ;;
    "run Bitwarden Electron") bitwarden ;;
    ${sepStr}*) exit 1 ;;
    *)          name=$(echo "$chosen" | cut -d '|' -f 1 | tr -d '[:space:]') # use awk
                id=$(echo "$chosen" | cut -d '|' -f 3 | tr -d '[:space:]')
                item=$(echo $database | jq -c ".[] | select(.id == \"$id\")")
                itemType=$(echo "$item" | jq -r ".type")
                case "$itemType" in
                    1) itemType=".login" ;;
                    2) itemType=".secureNote" ;;
                    3) itemType=".card" ;;
                    4) itemType=".identity" ;;
                esac
                keys=$(echo "$copyCmds" | jq -r "${itemType} | keys[]")
                unset fail
                for key in $keys; do
                    value=$(echo "$item" | jq -r "${key}")
                    cmds=$(echo "$copyCmds" | jq -r "${itemType}[\"${key}\"][]")
                    for cmd in "$cmds"; do
                        if ! eval "$cmd"; then
                        notify-send "$self" "Copy command failed: \"$cmd\"" &
                        fail=t; fi
                    done
                done
                [ -z "$fail" ] &&
                notify-send "$self" "$name copied successfully." & ;;
esac
